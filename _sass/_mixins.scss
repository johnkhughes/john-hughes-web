@mixin media-query($min: 0, $max: null, $media: all, $after: null) {
    $query: $media;

    @if map-get($breakpoints, $min) {
        $min: map-get($breakpoints, $min);
    }

    @if map-get($breakpoints, $max) {
        $max: map-get($breakpoints, $max);
        $tolerance: 1px;

        @if unit($max) != 'px' {
            $tolerance: 0.001;
        }

        $max: $max - $tolerance;
    }

    @if type-of($min) == 'number' and $min != 0 {
        $query: "#{$query} and (min-width: #{$min})";
    }

    @if type-of($max) == 'number' and $max != 0 {
        $query: "#{$query} and (max-width: #{$max})";
    }

    @if type-of($after) == 'string' {
        $query: "#{$query} #{$after}";
    }

    @media #{$query} {
        @content;
    }
}

@mixin dark-mode($media: all) {
    @media #{$media} and (prefers-color-scheme: dark) {
        @content;
    }
}

@mixin font-size($n) {
    @if $n == -1 {
        font-size: 0.875em;
    }

    @else if $n < -1 {
        font-size: 0.75em;
    }

    @else {
        @each $breakpoint, $scale in $type-scales {
            @include media-query($breakpoint) {
                font-size: 1em * pow($scale, $n);
            }
        }
    }
}

@mixin margin-x($size) {
    margin: {
        left: $size;
        right: $size;
    }
}

@mixin margin-y($size) {
    margin: {
        top: $size;
        bottom: $size;
    }
}

@mixin padding-x($size) {
    padding: {
        left: $size;
        right: $size;
    }
}

@mixin padding-y($size) {
    padding: {
        top: $size;
        bottom: $size;
    }
}

@mixin transition-colors {
    transition: {
        duration: $transition-duration;
        property: background-color, border-color, color, fill, opacity, text-decoration-color;
    }
}

@mixin heading-link {
    $decoration-opacity: 0.15;

    color: $body-color;
    display: inline-block;
    text-decoration-line: underline;
    text-decoration-color: rgba($body-color, $decoration-opacity);

    &:hover {
        color: $link-color;
        text-decoration-color: rgba($link-color, $decoration-opacity);
    }

    @include dark-mode {
        color: $dark-mode-body-color;
        text-decoration-color: rgba($dark-mode-body-color, $decoration-opacity);

        &:hover {
            color: $dark-mode-link-color;
            text-decoration-color: rgba($dark-mode-link-color, $decoration-opacity);
        }
    }
}

@mixin subtle-link {
    text-decoration: none;
}

@mixin silent-link {
    color: inherit;
    text-decoration: none;

    &:hover {
        color: $link-color;
        text-decoration: none;
    }

    @include dark-mode {
        &:hover {
            color: $dark-mode-link-color;
        }
    }
}

@mixin stretched-link {
    &::after {
        bottom: 0;
        content: "";
        left: 0;
        pointer-events: auto;
        position: absolute;
        right: 0;
        top: 0;
        z-index: 1;
    }
}
